import os
from os import listdir
import zipfile
import rioxarray
import xarray
import boto3
import numpy as np
import pandas as pd
import datetime
import rasterio
from rasterio import fill
from datetime import datetime
from app.logger import Logger
from typing import List, Set, Dict, Tuple, Optional

class AqiArchiver:
    """AqiArchiver can download air quality index (AQI) data generated by FMI's Enfuser model.

    Attributes:
        log: An instance of Logger class for writing log messages.
        aqi_dir: A filepath pointing to a directory where all AQI files will be downloaded to and processed.
        s3_bucketname: The name of an AWS s3 bucket from where the enfuser data will be fetched from.
        s3_region: The name of an AWS s3 bucket from where the enfuser data will be fetched from.
        AWS_ACCESS_KEY_ID: The name of a "secret" aws access key id to enfuser s3 bucket.
        AWS_SECRET_ACCESS_KEY: The name of a "secret" aws access key to enfuser s3 bucket.
        status: The status of the aqi processor - has latest AQI data been processed or not.
    """

    def __init__(self, logger: Logger, aqi_dir: str = 'aqi_cache/', set_aws_secrets: bool = False):
        self.log = logger
        self.wip_aqi_download: str = ''
        self.latest_aqi_download: str = ''
        self.wip_aqi_transfer: str = ''
        self.latest_aqi_transfer: str = ''
        self.aqi_dir = aqi_dir
        self.s3_enfuser_data_folder = 'Finland/pks/'
        self.s3_bucketname: str = 'enfusernow2'
        self.s3_region: str = 'eu-central-1'
        self.AWS_ACCESS_KEY_ID: str = ''
        self.AWS_SECRET_ACCESS_KEY: str = ''
        self.status: str = ''
        if (set_aws_secrets == True): self.set_aws_secrets()

    def set_aws_secrets(self) -> None:
        """Initializes credentials required for accessing Enfuser data in FMI's S3 bucket in AWS.
        Request credentials (AWS_ACCESS_KEY_ID & AWS_SECRET_ACCESS_KEY) from FMI and add them to file credentials.csv.
        """
        creds = pd.read_csv('credentials.csv', sep=',', encoding='utf-8')
        self.AWS_ACCESS_KEY_ID = creds['Access key ID'][0]
        self.AWS_SECRET_ACCESS_KEY = creds['Secret access key'][0]

    def get_expected_aqi_download_name(self) -> str:
        """Returns the name of the latest expected aqi zip file.
        """
        curdt = datetime.utcnow().strftime('%Y-%m-%dT%H')
        aqi_zip_name = 'allPollutants_' + curdt + '.zip'
        return aqi_zip_name

    def set_wip_aqi_download_name(self, aqi_zip_name) -> None:
        self.wip_aqi_download = aqi_zip_name

    def reset_wip_aqi_download_name(self):
        self.wip_aqi_download = ''

    def new_aqi_download_available(self) -> bool:
        """Returns False if the expected latest aqi file is either already downloaded or currently being downloaded, 
        else returns True.
        """
        b_available = True
        status = ''
        expected_aqi_zip_name = self.get_expected_aqi_download_name()
        if (self.latest_aqi_download == expected_aqi_zip_name):
            status = 'latest AQI data already downloaded'
            b_available = False
        elif (self.wip_aqi_download == expected_aqi_zip_name):
            status = 'latest AQI data is being downloaded'
            b_available = False
        else:
            status = 'new AQI data to download: '+ expected_aqi_zip_name
            b_available = True

        if (self.status != status):
            self.log.info(status)
            self.status = status
        return b_available

    def fetch_enfuser_data(self, aqi_zip_name: str) -> str:
        """Downloads the current enfuser data as a zip file containing multiple netcdf files to the aqi_cache directory. 
        
        Returns:
            The name of the downloaded zip file (e.g. allPollutants_2019-11-08T14.zip).
        """
        # connect to S3
        s3 = boto3.client('s3',
                        region_name=self.s3_region,
                        aws_access_key_id=self.AWS_ACCESS_KEY_ID,
                        aws_secret_access_key=self.AWS_SECRET_ACCESS_KEY)
                
        # download the netcdf file to a specified location
        file_out = self.aqi_dir + '/' + aqi_zip_name
        s3.download_file(self.s3_bucketname, self.s3_enfuser_data_folder + aqi_zip_name, file_out)
        self.latest_aqi_download = aqi_zip_name
        return aqi_zip_name

    def remove_old_aqi_files(self) -> None:
        """Removes all aqi zip files older than the latest from from aqi_cache.
        """
        rm_count = 0
        error_count = 0
        for file_n in listdir(self.aqi_dir):
            if (file_n.endswith('.zip') and file_n != self.latest_aqi_download):
                try:
                    os.remove(self.aqi_dir + file_n)
                    rm_count += 1
                except Exception:
                    error_count += 1
                    pass
        self.log.info('removed '+ str(rm_count) +' old AQI zip files')
        if (error_count > 0):
            self.log.warn('could not remove '+ error_count +' old AQI zip files')
